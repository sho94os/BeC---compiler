GETSUBOPT(3)               Linux Programmer's Manual              GETSUBOPT(3)

NNAAMMEE
       getsubopt - parse suboption arguments from a string

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssttddlliibb..hh>>

       iinntt ggeettssuubboopptt((cchhaarr ****_o_p_t_i_o_n_p,, cchhaarr ** ccoonnsstt **_t_o_k_e_n_s,, cchhaarr ****_v_a_l_u_e_p));;

   Feature Test Macro Requirements for glibc (see ffeeaattuurree__tteesstt__mmaaccrrooss(7)):

       ggeettssuubboopptt():
           _XOPEN_SOURCE >= 500 || _XOPEN_SOURCE && _XOPEN_SOURCE_EXTENDED
           || /* Since glibc 2.12: */ _POSIX_C_SOURCE >= 200809L

DDEESSCCRRIIPPTTIIOONN
       ggeettssuubboopptt()  parses  the list of comma-separated suboptions provided in
       _o_p_t_i_o_n_p.  (Such a suboption list is typically produced  when  ggeettoopptt(3)
       is  used  to  parse  a  command  line; see for example the _-_o option of
       mmoouunntt(8).)  Each suboption may include an associated  value,  which  is
       separated  from  the suboption name by an equal sign.  The following is
       an example of the kind of string that might be passed in _o_p_t_i_o_n_p:

           rroo,,nnaammee==xxyyzz

       The _t_o_k_e_n_s argument is a pointer to a NULL-terminated array of pointers
       to  the  tokens  that ggeettssuubboopptt() will look for in _o_p_t_i_o_n_p.  The tokens
       should be distinct, null-terminated strings  containing  at  least  one
       character, with no embedded equal signs or commas.

       Each call to ggeettssuubboopptt() returns information about the next unprocessed
       suboption in _o_p_t_i_o_n_p.  The first equal sign in a suboption (if any)  is
       interpreted  as a separator between the name and the value of that sub‐
       option.  The value extends to the next comma, or (for the  last  subop‐
       tion) to the end of the string.  If the name of the suboption matches a
       known name from _t_o_k_e_n_s, and a value string was found, ggeettssuubboopptt()  sets
       _*_v_a_l_u_e_p  to  the address of that string.  The first comma in _o_p_t_i_o_n_p is
       overwritten with a null  byte,  so  _*_v_a_l_u_e_p  is  precisely  the  "value
       string" for that suboption.

       If  the suboption is recognized, but no value string was found, _*_v_a_l_u_e_p
       is set to NULL.

       When ggeettssuubboopptt() returns, _o_p_t_i_o_n_p points to the next suboption,  or  to
       the null byte ('\0') at the end of the string if the last suboption was
       just processed.

RREETTUURRNN VVAALLUUEE
       If the first suboption in _o_p_t_i_o_n_p is  recognized,  ggeettssuubboopptt()  returns
       the  index  of the matching suboption element in _t_o_k_e_n_s.  Otherwise, -1
       is returned and _*_v_a_l_u_e_p is the entire _n_a_m_e[[==_v_a_l_u_e]] string.

       Since _*_o_p_t_i_o_n_p is changed, the first suboption before the call to  ggeett‐‐
       ssuubboopptt()  is  not  (necessarily)  the same as the first suboption after
       ggeettssuubboopptt().

AATTTTRRIIBBUUTTEESS
       For  an  explanation  of  the  terms  used   in   this   section,   see
       aattttrriibbuutteess(7).

       ┌────────────┬───────────────┬─────────┐
       │IInntteerrffaaccee   │ AAttttrriibbuuttee     │ VVaalluuee   │
       ├────────────┼───────────────┼─────────┤
       │ggeettssuubboopptt() │ Thread safety │ MT-Safe │
       └────────────┴───────────────┴─────────┘
CCOONNFFOORRMMIINNGG TTOO
       POSIX.1-2001, POSIX.1-2008.

NNOOTTEESS
       Since  ggeettssuubboopptt()  overwrites  any  commas  it  finds  in  the  string
       _*_o_p_t_i_o_n_p, that string must be writable; it cannot be a string constant.

EEXXAAMMPPLLEE
       The following program expects suboptions following a "-o" option.

       #define _XOPEN_SOURCE 500
       #include <stdlib.h>
       #include <assert.h>
       #include <stdio.h>

       int
       main(int argc, char **argv)
       {
           enum {
               RO_OPT = 0,
               RW_OPT,
               NAME_OPT
           };
           char *const token[] = {
               [RO_OPT]   = "ro",
               [RW_OPT]   = "rw",
               [NAME_OPT] = "name",
               NULL
           };
           char *subopts;
           char *value;
           int opt;

           int readonly = 0;
           int readwrite = 0;
           char *name = NULL;
           int errfnd = 0;

           while ((opt = getopt(argc, argv, "o:")) != -1) {
               switch (opt) {
               case 'o':
                   subopts = optarg;
                   while (*subopts != '\0' && !errfnd) {

                   switch (getsubopt(&subopts, token, &value)) {
                   case RO_OPT:
                       readonly = 1;
                       break;

                   case RW_OPT:
                       readwrite = 1;
                       break;

                   case NAME_OPT:
                       if (value == NULL) {
                           fprintf(stderr, "Missing value for "
                                   "suboption '%s'\n", token[NAME_OPT]);
                           errfnd = 1;
                           continue;
                       }

                       name = value;
                       break;

                   default:
                       fprintf(stderr, "No match found "
                               "for token: /%s/\n", value);
                       errfnd = 1;
                       break;
                   }
               }
               if (readwrite && readonly) {
                   fprintf(stderr, "Only one of '%s' and '%s' can be "
                           "specified\n", token[RO_OPT], token[RW_OPT]);
                   errfnd = 1;
               }
               break;

               default:
                   errfnd = 1;
               }
           }

           if (errfnd || argc == 1) {
               fprintf(stderr, "\nUsage: %s -o <suboptstring>\n", argv[0]);
               fprintf(stderr, "suboptions are 'ro', 'rw', "
                       "and 'name=<value>'\n");
               exit(EXIT_FAILURE);
           }

           /* Remainder of program... */

           exit(EXIT_SUCCESS);
       }

SSEEEE AALLSSOO
       ggeettoopptt(3)

CCOOLLOOPPHHOONN
       This page is part of release 4.04 of the Linux  _m_a_n_-_p_a_g_e_s  project.   A
       description  of  the project, information about reporting bugs, and the
       latest    version    of    this    page,    can     be     found     at
       http://www.kernel.org/doc/man-pages/.

GNU                               2015-08-08                      GETSUBOPT(3)
